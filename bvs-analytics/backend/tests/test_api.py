#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
root_dir = Path(__file__).parent
sys.path.insert(0, str(root_dir))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    
    print("=== –¢–ï–°–¢ –ò–ú–ü–û–†–¢–û–í ===\n")
    
    try:
        print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        from app.core.config import settings
        print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {settings.PROJECT_NAME}")
        
        print("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π...")
        from app.models.flight import Flight, Region
        print("   ‚úÖ –ú–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        print("3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ö–µ–º...")
        from app.schemas.flight import FlightCreate, BasicMetrics
        print("   ‚úÖ –°—Ö–µ–º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        print("4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –ø–∞—Ä—Å–µ—Ä–∞...")
        from parsers.telegram_parser import TelegramParser
        print("   ‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        print("5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤...")
        from app.services.flight_service import FlightService
        print("   ‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        print("6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç API...")
        from app.api.flights import router
        print("   ‚úÖ API —Ä–æ—É—Ç–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        print("7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        from app.main import app
        print("   ‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        
        print("\n‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_database_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\n=== –¢–ï–°–¢ –ú–û–î–ï–õ–ï–ô –ë–î ===\n")
    
    try:
        from app.core.database import engine, Base
        from app.models.flight import Flight, Region
        
        print("1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø–∞–º—è—Ç–∏...")
        Base.metadata.create_all(bind=engine)
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        print("2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü...")
        tables = Base.metadata.tables.keys()
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {list(tables)}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_parser_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞ —Å –º–æ–¥–µ–ª—è–º–∏"""
    
    print("\n=== –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–ê–†–°–ï–†–ê ===\n")
    
    try:
        from parsers.telegram_parser import TelegramParser
        from parsers.data_processor import DataProcessor
        
        parser = TelegramParser()
        processor = DataProcessor()
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ SHR —Å–æ–æ–±—â–µ–Ω–∏–µ
        shr_msg = """(SHR-ZZZZZ
-ZZZZ0900
-M0016/M0026 /ZONA R0,7 5509N03737E/
-ZZZZ0900
-DEP/5509N03737E DEST/5509N03737E DOF/240101 EET/UUWV0001
OPR/–ú–ï–ù–ñ–£–õ–ò–ù –ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í–ò4 REG/07C4935 TYP/BLA RMK/M–†11608
SID/7771445428)"""
        
        print("1. –ü–∞—Ä—Å–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        flight_data = parser.parse_shr_message(shr_msg)
        print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {flight_data.get('registration')}")
        
        print("2. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ë–î...")
        flight_record = processor.create_flight_record(flight_data)
        print(f"   ‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {len(flight_record)} –ø–æ–ª–µ–π")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_api_schemas():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Pydantic —Å—Ö–µ–º—ã"""
    
    print("\n=== –¢–ï–°–¢ –°–•–ï–ú API ===\n")
    
    try:
        from app.schemas.flight import FlightCreate, BasicMetrics, RegionRating
        from datetime import datetime
        
        print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ø–æ–ª–µ—Ç–∞...")
        flight_data = FlightCreate(
            flight_id="TEST001",
            registration="07C4935",
            aircraft_type="BLA",
            operator="Test Operator",
            departure_lat=55.15,
            departure_lon=37.617,
            arrival_lat=55.15,
            arrival_lon=37.617
        )
        print(f"   ‚úÖ –°—Ö–µ–º–∞ –ø–æ–ª–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {flight_data.flight_id}")
        
        print("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –º–µ—Ç—Ä–∏–∫...")
        metrics = BasicMetrics(
            total_flights=100,
            avg_duration_minutes=45.5,
            unique_aircraft=25,
            unique_operators=10,
            date_range={'min': datetime.now(), 'max': datetime.now()}
        )
        print(f"   ‚úÖ –°—Ö–µ–º–∞ –º–µ—Ç—Ä–∏–∫ —Å–æ–∑–¥–∞–Ω–∞: {metrics.total_flights} –ø–æ–ª–µ—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å—Ö–µ–º: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í BVS ANALYTICS API\n")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("–ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", test_database_models),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞", test_parser_integration),
        ("–°—Ö–µ–º—ã API", test_api_schemas),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*60}")
        print(f"–¢–ï–°–¢: {test_name}")
        print('='*60)
        
        if test_func():
            passed += 1
            print(f"\n‚úÖ –¢–ï–°–¢ '{test_name}' –ü–†–û–ô–î–ï–ù")
        else:
            print(f"\n‚ùå –¢–ï–°–¢ '{test_name}' –ü–†–û–í–ê–õ–ï–ù")
    
    print(f"\n{'='*60}")
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print('='*60)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("python3 run.py")
        print("\n–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/docs")
    else:
        print(f"\n‚ö†Ô∏è  {total-passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)