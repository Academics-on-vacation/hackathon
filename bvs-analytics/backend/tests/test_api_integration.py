#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
"""

import sys
import os
import unittest
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))


class TestAPIIntegration(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    def test_imports(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        try:
            from app.core.config import settings
            self.assertIsNotNone(settings.PROJECT_NAME)
            
            from app.models.flight import Flight, Region
            self.assertTrue(hasattr(Flight, '__tablename__'))
            
            from app.schemas.flight import FlightCreate, BasicMetrics
            self.assertTrue(hasattr(FlightCreate, '__fields__'))
            
            from parsers.telegram_parser import TelegramParser
            parser = TelegramParser()
            self.assertIsNotNone(parser)
            
            from app.services.flight_service import FlightService
            self.assertTrue(hasattr(FlightService, 'get_flights'))
            
            from app.api.flights import router
            self.assertIsNotNone(router)
            
            from app.main import app
            self.assertIsNotNone(app)
            
        except ImportError as e:
            self.fail(f"Import failed: {e}")
    
    def test_database_models(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from app.core.database import engine, Base
            from app.models.flight import Flight, Region
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø–∞–º—è—Ç–∏
            Base.metadata.create_all(bind=engine)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
            tables = Base.metadata.tables.keys()
            self.assertIn('flights', tables)
            self.assertIn('regions', tables)
            
        except Exception as e:
            self.fail(f"Database model test failed: {e}")
    
    def test_parser_integration(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞ —Å –º–æ–¥–µ–ª—è–º–∏"""
        try:
            from parsers.telegram_parser import TelegramParser
            from parsers.data_processor import DataProcessor
            
            parser = TelegramParser()
            processor = DataProcessor()
            
            # –¢–µ—Å—Ç–æ–≤–æ–µ SHR —Å–æ–æ–±—â–µ–Ω–∏–µ
            shr_msg = """(SHR-ZZZZZ
-ZZZZ0900
-M0016/M0026 /ZONA R0,7 5509N03737E/
-ZZZZ0900
-DEP/5509N03737E DEST/5509N03737E DOF/240101 EET/UUWV0001
OPR/–ú–ï–ù–ñ–£–õ–ò–ù –ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í–ò4 REG/07C4935 TYP/BLA RMK/M–†11608
SID/7771445428)"""
            
            # –ü–∞—Ä—Å–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            flight_data = parser.parse_shr_message(shr_msg)
            self.assertNotIn('error', flight_data)
            self.assertEqual(flight_data.get('registration'), '07C4935')
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ë–î
            flight_record = processor.create_flight_record(flight_data)
            self.assertIsInstance(flight_record, dict)
            self.assertGreater(len(flight_record), 0)
            
        except Exception as e:
            self.fail(f"Parser integration test failed: {e}")
    
    def test_api_schemas(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Pydantic —Å—Ö–µ–º—ã"""
        try:
            from app.schemas.flight import FlightCreate, BasicMetrics, RegionRating
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ø–æ–ª–µ—Ç–∞
            flight_data = FlightCreate(
                flight_id="TEST001",
                registration="07C4935",
                aircraft_type="BLA",
                operator="Test Operator",
                departure_lat=55.15,
                departure_lon=37.617,
                arrival_lat=55.15,
                arrival_lon=37.617
            )
            self.assertEqual(flight_data.flight_id, "TEST001")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –º–µ—Ç—Ä–∏–∫
            metrics = BasicMetrics(
                total_flights=100,
                avg_duration_minutes=45.5,
                unique_aircraft=25,
                unique_operators=10,
                date_range={'min': datetime.now(), 'max': datetime.now()}
            )
            self.assertEqual(metrics.total_flights, 100)
            
        except Exception as e:
            self.fail(f"API schemas test failed: {e}")
    
    def test_phone_normalizer_integration(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
        try:
            from app.utils.phone_normalizer import normalize_phone_number, normalize_phone_numbers
            from parsers.telegram_parser import TelegramParser
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            self.assertIsNotNone(normalize_phone_number)
            self.assertIsNotNone(normalize_phone_numbers)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–∞—Ä—Å–µ—Ä–æ–º
            parser = TelegramParser()
            test_message = """(SHR-TEST
OPR/–¢–ï–°–¢–û–í–´–ô –û–ü–ï–†–ê–¢–û–† +79123456789 REG/TEST TYP/BLA
SID/1234567890)"""
            
            result = parser.parse_shr_message(test_message)
            self.assertNotIn('error', result)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
            if 'phone_numbers' in result:
                for phone in result['phone_numbers']:
                    self.assertTrue(phone.startswith('7'))
                    self.assertEqual(len(phone), 11)
                    self.assertTrue(phone.isdigit())
            
        except Exception as e:
            self.fail(f"Phone normalizer integration test failed: {e}")


def run_manual_test():
    """–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í BVS ANALYTICS API\n")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports_manual),
        ("–ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", test_database_models_manual),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞", test_parser_integration_manual),
        ("–°—Ö–µ–º—ã API", test_api_schemas_manual),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤", test_phone_normalizer_integration_manual),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*60}")
        print(f"–¢–ï–°–¢: {test_name}")
        print('='*60)
        
        if test_func():
            passed += 1
            print(f"\n‚úÖ –¢–ï–°–¢ '{test_name}' –ü–†–û–ô–î–ï–ù")
        else:
            print(f"\n‚ùå –¢–ï–°–¢ '{test_name}' –ü–†–û–í–ê–õ–ï–ù")
    
    print(f"\n{'='*60}")
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print('='*60)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("python3 run.py")
        print("\n–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/docs")
    else:
        print(f"\n‚ö†Ô∏è  {total-passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
    
    return passed == total


def test_imports_manual():
    """–†—É—á–Ω–æ–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
    try:
        print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        from app.core.config import settings
        print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {settings.PROJECT_NAME}")
        
        print("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π...")
        from app.models.flight import Flight, Region
        print("   ‚úÖ –ú–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        print("3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ö–µ–º...")
        from app.schemas.flight import FlightCreate, BasicMetrics
        print("   ‚úÖ –°—Ö–µ–º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        print("4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –ø–∞—Ä—Å–µ—Ä–∞...")
        from parsers.telegram_parser import TelegramParser
        print("   ‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        print("5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤...")
        from app.services.flight_service import FlightService
        print("   ‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        print("6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç API...")
        from app.api.flights import router
        print("   ‚úÖ API —Ä–æ—É—Ç–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        print("7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        from app.main import app
        print("   ‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        
        print("8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
        from app.utils.phone_normalizer import normalize_phone_number
        print("   ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_database_models_manual():
    """–†—É—á–Ω–æ–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–µ–π –ë–î"""
    try:
        from app.core.database import engine, Base
        from app.models.flight import Flight, Region
        
        print("1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø–∞–º—è—Ç–∏...")
        Base.metadata.create_all(bind=engine)
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        print("2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü...")
        tables = Base.metadata.tables.keys()
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {list(tables)}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_parser_integration_manual():
    """–†—É—á–Ω–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
    try:
        from parsers.telegram_parser import TelegramParser
        from parsers.data_processor import DataProcessor
        
        parser = TelegramParser()
        processor = DataProcessor()
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ SHR —Å–æ–æ–±—â–µ–Ω–∏–µ
        shr_msg = """(SHR-ZZZZZ
-ZZZZ0900
-M0016/M0026 /ZONA R0,7 5509N03737E/
-ZZZZ0900
-DEP/5509N03737E DEST/5509N03737E DOF/240101 EET/UUWV0001
OPR/–ú–ï–ù–ñ–£–õ–ò–ù –ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í–ò4 REG/07C4935 TYP/BLA RMK/M–†11608
SID/7771445428)"""
        
        print("1. –ü–∞—Ä—Å–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        flight_data = parser.parse_shr_message(shr_msg)
        print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {flight_data.get('registration')}")
        
        print("2. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ë–î...")
        flight_record = processor.create_flight_record(flight_data)
        print(f"   ‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {len(flight_record)} –ø–æ–ª–µ–π")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_api_schemas_manual():
    """–†—É—á–Ω–æ–π —Ç–µ—Å—Ç —Å—Ö–µ–º API"""
    try:
        from app.schemas.flight import FlightCreate, BasicMetrics, RegionRating
        
        print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ø–æ–ª–µ—Ç–∞...")
        flight_data = FlightCreate(
            flight_id="TEST001",
            registration="07C4935",
            aircraft_type="BLA",
            operator="Test Operator",
            departure_lat=55.15,
            departure_lon=37.617,
            arrival_lat=55.15,
            arrival_lon=37.617
        )
        print(f"   ‚úÖ –°—Ö–µ–º–∞ –ø–æ–ª–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {flight_data.flight_id}")
        
        print("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –º–µ—Ç—Ä–∏–∫...")
        metrics = BasicMetrics(
            total_flights=100,
            avg_duration_minutes=45.5,
            unique_aircraft=25,
            unique_operators=10,
            date_range={'min': datetime.now(), 'max': datetime.now()}
        )
        print(f"   ‚úÖ –°—Ö–µ–º–∞ –º–µ—Ç—Ä–∏–∫ —Å–æ–∑–¥–∞–Ω–∞: {metrics.total_flights} –ø–æ–ª–µ—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å—Ö–µ–º: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_phone_normalizer_integration_manual():
    """–†—É—á–Ω–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
    try:
        from app.utils.phone_normalizer import normalize_phone_number, normalize_phone_numbers
        from parsers.telegram_parser import TelegramParser
        
        print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏...")
        test_phone = "+79123456789"
        normalized = normalize_phone_number(test_phone)
        print(f"   ‚úÖ {test_phone} ‚Üí {normalized}")
        
        print("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–∞—Ä—Å–µ—Ä–æ–º...")
        parser = TelegramParser()
        test_message = """(SHR-TEST
OPR/–¢–ï–°–¢–û–í–´–ô –û–ü–ï–†–ê–¢–û–† +79123456789 8(987)654-32-10 REG/TEST TYP/BLA
SID/1234567890)"""
        
        result = parser.parse_shr_message(test_message)
        if 'phone_numbers' in result:
            print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã –∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–º–µ—Ä–∞: {result['phone_numbers']}")
        else:
            print("   ‚ö†Ô∏è –ù–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    # –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–∏–±–æ unittest, –ª–∏–±–æ —Ä—É—á–Ω–æ–π —Ç–µ—Å—Ç
    import argparse
    
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API')
    parser.add_argument('--manual', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω–æ–π —Ç–µ—Å—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º')
    args = parser.parse_args()
    
    if args.manual:
        success = run_manual_test()
        sys.exit(0 if success else 1)
    else:
        unittest.main()