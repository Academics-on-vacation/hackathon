#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ BVS Analytics
"""

import sys
import os
import unittest
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))


def discover_and_run_tests():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ –ø–∞–ø–∫–µ tests
    loader = unittest.TestLoader()
    start_dir = os.path.dirname(__file__)
    suite = loader.discover(start_dir, pattern='test_*.py')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    return result.wasSuccessful()


def run_manual_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä—É—á–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í BVS ANALYTICS\n")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä—É—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    from test_phone_normalizer import run_manual_test as phone_test
    from test_telegram_parser import run_manual_test as parser_test
    from test_api_integration import run_manual_test as api_test
    
    tests = [
        ("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤", phone_test),
        ("–ü–∞—Ä—Å–µ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º–º –ë–í–°", parser_test),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API", api_test),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*80}")
        print(f"–¢–ï–°–¢: {test_name}")
        print('='*80)
        
        try:
            if test_func():
                passed += 1
                print(f"\n‚úÖ –¢–ï–°–¢ '{test_name}' –ü–†–û–ô–î–ï–ù")
            else:
                print(f"\n‚ùå –¢–ï–°–¢ '{test_name}' –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"\n‚ùå –¢–ï–°–¢ '{test_name}' –ü–†–û–í–ê–õ–ï–ù –° –û–®–ò–ë–ö–û–ô: {e}")
    
    print(f"\n{'='*80}")
    print(f"–û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print('='*80)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
        print("   ‚úÖ –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç 7XXXXXXXXXX")
        print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –ø–∞—Ä—Å–µ—Ä–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º")
        print("   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ SHR, DEP, ARR —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ API")
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print(f"\n‚ö†Ô∏è  {total-passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
    
    return passed == total


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ BVS Analytics')
    parser.add_argument('--manual', action='store_true', 
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º')
    parser.add_argument('--unittest', action='store_true', 
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å unittest —Ç–µ—Å—Ç—ã')
    
    args = parser.parse_args()
    
    if args.manual:
        success = run_manual_tests()
    elif args.unittest:
        success = discover_and_run_tests()
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º unittest
        print("–ó–∞–ø—É—Å–∫ unittest —Ç–µ—Å—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --manual –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞)")
        success = discover_and_run_tests()
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()